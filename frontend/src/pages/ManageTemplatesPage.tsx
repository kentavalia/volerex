import React, { useEffect, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
// import brain from "brain"; // Commented out for direct fetch test
import { API_URL, auth } from "app"; // Ensure auth is imported
import { PdfTemplate } from "types"; // Assuming this type is generated by brain
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
// import { API_URL } from "app"; // Already imported or will be by previous change
import { Skeleton } from "@/components/ui/skeleton"; // For loading state

const ManageTemplatesPage = () => {
  const [templates, setTemplates] = useState<PdfTemplate[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchTemplates = async () => {
      setIsLoading(true);
      setError(null);
      try {
        const token = await auth.getAuthToken();
        if (!token) {
          throw new Error("User not authenticated. Cannot fetch templates.");
        }

        const response = await fetch(`${API_URL}/templates/`, { 
          method: 'GET', 
          headers: { 
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          credentials: 'include' // Corrected placement
        }); 

        if (response.ok) {
          const data = await response.json();
          setTemplates(data);
        } else {
          const errorData = await response.json().catch(() => ({ detail: "Failed to fetch templates and parse error." }));
          throw new Error(errorData.detail || `Server error: ${response.status}`);
        }
      } catch (err: any) {
        console.error("Failed to fetch templates:", err);
        setError(err.message || "An unexpected error occurred while fetching templates.");
      }
      setIsLoading(false);
    };

    fetchTemplates();
  }, []);

  const handleCreateNew = () => {
    // Navigate to the page for creating/editing a new template
    // For MYA-8, this will be something like /templates/new or /templates/edit
    navigate("/edit-template-page?action=new");
    console.log("Navigate to create new template page (MYA-8)");
  };

  const handleEditTemplate = (templateId: string) => {
    // Navigate to the page for editing a specific template
    navigate(`/edit-template-page?id=${templateId}&action=edit`);
    console.log(`Navigating to edit template page for ID: ${templateId}`);
  };

  if (isLoading) {
    return (
      <div className="container mx-auto p-4">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold">Manage PDF Templates</h1>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {[...Array(3)].map((_, i) => (
            <Card key={i}>
              <CardHeader>
                <Skeleton className="h-6 w-3/4 mb-2" />
                <Skeleton className="h-4 w-full" />
              </CardHeader>
              <CardContent>
                <Skeleton className="h-10 w-full" />
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto p-4">
        <Alert variant="destructive">
          <AlertTitle>Error Loading Templates</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
        <Button onClick={() => window.location.reload()} className="mt-4">Try Again</Button>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-4">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold tracking-tight">Manage PDF Templates</h1>
        <Button onClick={handleCreateNew} className="bg-blue-600 hover:bg-blue-700">
          Create New Template
        </Button>
      </div>

      {templates.length === 0 && !isLoading && (
        <Card className="text-center py-10">
          <CardHeader>
            <CardTitle>No Templates Yet</CardTitle>
            <CardDescription>
              Get started by creating your first PDF extraction template.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Button onClick={handleCreateNew} size="lg">
              Create Your First Template
            </Button>
          </CardContent>
        </Card>
      )}

      {templates.length > 0 && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {templates.map((template) => (
            <Card 
              key={template.id} 
              className="hover:shadow-lg transition-shadow duration-200 cursor-pointer"
              onClick={() => handleEditTemplate(template.id)}
            >
              <CardHeader>
                <CardTitle className="truncate">{template.name}</CardTitle>
                <CardDescription className="h-10 overflow-hidden text-ellipsis">
                  {template.description || "No description provided."}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-gray-600">
                  Fields to extract: {template.target_fields?.length || 0}
                </p>
                {/* Future: Could show a few field names here */}
              </CardContent>
              {/* <CardFooter>
                <Button variant="outline" size="sm" onClick={(e) => { e.stopPropagation(); handleEditTemplate(template.id); }}>
                  Edit
                </Button>
              </CardFooter> */}
            </Card>
          ))}
        </div>
      )}
    </div>
  );
};

export default ManageTemplatesPage;
